setwd("~/Data_class/R_Analysis/01_Demo")
x <-3
x <-5
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
# 15.2.3 Read CSV
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
# Change to JSON libray to use JSONlite package
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
# 15.2.4 Select Data in R
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
demo_table[3,"Year"]
demo_table[3,3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
# Subset Data in R
?subset()
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
View(filter_table3)
# Sample Data in R
?sample()
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
# Combine all threee steps
demo_table[sample(1:nrow(demo_table), 3),]
# 15.2.5 Transform data
# change to tidyverse library
library(tidyverse)
?mutate()
#add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
View(demo_table)
#create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
View(summarize_demo)
#create summary table with multiple columns
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
# Reshape data
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
# Alternatively
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(long_table)
?spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
# sorting the columns of both dataframes
table <-demo_table3[,order(colnames(wide_table))]
View(table)
# sort columns using column names function and bracket notation only
table2 <- demo_table3[,(colnames(wide_table))]
View(table2)
# 15.3.1 ggplot2
?ggplot()
head(mpg)
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=class))
View(plt)
#plot a bar plot
plt + geom_bar()
?geom_bar()
#create summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
View(mpg_summary)
#import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
View(plt)
#plot a bar plot
plt + geom_col()
# 15.3.3 addomg formatting functions
#plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
#plot a boxplot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
#create summary table
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
View(mpg_summary)
#import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
View(plt)
# generate the plot
plt + geom_line()
#add line plot with labels
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty))
View(plt)
#add scatter plot with labels
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
View(plt)
#add scatter plot with labels
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
#add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
#Skill Drill 15.3.4 additional visualizations using MPG
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,size=mpg))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,size=y))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,size='y'))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,size=5))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
# 15.3.5 Create advanced boxplots
#import dataset into ggplot2
plt <- ggplot(mpg,aes(y=hwy))
#add boxplot
plt + geom_boxplot()
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
#add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# Skill drill 15.3.5 Customize boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy,color=class)
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy,outlier.colour)
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1),color=class)
# 15.3.6 heatmap plots
#create summary table
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
#create heatmap with labels
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
#create summary table
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
#import dataset into ggplot2
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
#add heatmap with labels and rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
# 15.3.7 add layers to plots
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
#add boxplot
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) + geom_point()
#create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
#import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
#add scatter plot
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size")
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
#import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
#add scatter plot with labels pverlay with error bars
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
#convert to long format
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
View(mpg_long)
head(mpg_long)
#import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#add boxplot with labels rotated 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
?facet_wrap()
#import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#create multiple boxplots, one for each MPG type rotate x-axis labels
> plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
# Skill Drill 15.3.7 using different variable to do facet wrap
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Model,color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
plt <- ggplot(mpg_long,aes(x=manufacturer,y=model,color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(class)) + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
# 15.4.4 Testing for Normality
#visualize distribution using density plot
ggplot(mtcars,aes(x=wt)) + geom_density()
?shapiro.test()
shapiro.test(mtcars$wt)
# 15.6.1 Sample VS Population Dataset
?sample_n()
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
View(population_table)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#randomly sample 50 data points
sample_table <- population_table %>% sample_n(50)
View(sample_table)
#import dataset into ggplot2
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
# 15.6.2 One-Sample t-Test
plt + geom_density()
?t.test()
#compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
# 15.6.3 Two-sample t-Test
#generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50)
#generate another 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50)
View(sample_table2)
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# 15.6.4 two-sample t-Test to compare test samples
#import dataset\
mpg_data <- read.csv('mpg_modified.csv')
View(mpg_data)
#select only data points where the year is 1999
mpg_1999 <- mpg_data %>% filter(year==1999)
view(mpg_1999)
#select only data points where the year is 2008
mpg_2008 <- mpg_data %>% filter(year==2008)
view(mpg_2008)
#compare the mean difference between two samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
# 15.6.5 Use the ANOVA Test
?aov()
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c("hp","cyl")]
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#compare means across multiple levels
aov(hp ~ cyl,data=mtcars_filt)
summary(aov(hp ~ cyl,data=mtcars_filt))
# 15.7.1 The Correlation Conundrum
?cor()
head(mtcars)
#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
#create scatter plot
plt + geom_point()
#calculate correlation coefficient
cor(mtcars$hp,mtcars$qsec)
#read in dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
View(used_cars)
head(used_cars)
#import dataset into ggplot2
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
#create a scatter plot
plt + geom_point()
#calculate correlation coefficient
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
#convert data frame into numeric matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
# 15.7.2 Return to Linear Regression
?lm()
#create linear model
lm(qsec ~ hp,mtcars)
#summarize linear model
summary(lm(qsec~hp,mtcars))
#create linear model
model <- lm(qsec ~ hp,mtcars)
View(model)
#determine y-axis values from linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
View(used_matrix)
#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
#plot scatter and linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
# 15.7.3 preform multiple linear regression
#generate multiple linear regression model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
#generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
# 15.8.1 Category Complexities
?chisq.test()
#generate contingency table
table(mpg$class,mpg$year)
View(table)
#generate contingency table
tbl <- table(mpg$class,mpg$year)
#compare categorical distributions
chisq.test(tbl)
save.image("~/Data_class/R_Analysis/01_Demo/Module 15 workspace.RData")
setwd("~/Data_class/MechaCar_Statistical_Analysis")
# DELIVERABLE ONE
# LOAD PACKAGES
library(dplyr)
# IMPORT AND READ CSV
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(MechaCar_mpg)
View(MechaCar_mpg)
# LINEAR REGRESSION
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_mpg)
# SUMMARY STATISTICS
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_mpg))
save.image("~/Data_class/MechaCar_Statistical_Analysis/MechaCarChallengeSession.RData")
# DELIVERABLE 2
# IMPORT AND READ CSV
Suspension_Coil <- read.csv(file='Suspension_Coil.csv',check.names = F, stringsAsFactors = F)
View(Suspension_Coil)
# STATS SUMMARY
# using summerize()
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups = 'keep')
View(total_summary)
# using group_by()
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI),Median = median(PSI), Variance = var(PSI), SD = sd(PSI) , .groups = 'keep')
View(lot_summary)
save.image("~/Data_class/MechaCar_Statistical_Analysis/MechaCarChallengeSession.RData")
# DELIVERABLE 3
# t-Test the lots, pop mu = 1,500psi
t.test(Suspension_Coil$PSI,mu=mean(Suspension_Coil$PSI))
# t-Test with subset function for lot 1
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot1"),mu=mean(Suspension_Coil$PSI))
# t-Test with subset function for lot 2
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot2"),mu=mean(Suspension_Coil$PSI))
# t-Test with subset function for lot 3
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot3"),mu=mean(Suspension_Coil$PSI))
save.image("~/Data_class/MechaCar_Statistical_Analysis/MechaCarChallengeSession.RData")
load("C:/Users/lizly/OneDrive/Documents/Data_class/MechaCar_Statistical_Analysis/MechaCarChallengeSession.RData")
